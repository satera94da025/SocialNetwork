{"version":3,"sources":["utils/validators/validators.ts","components/common/Preloader/Preloader.tsx","components/common/Paginator/Paginator.module.css","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","assets/images/user.png","api/chat-api.ts","redux/chat-reducer.ts","assets/images/preloader.svg","components/Users/users.module.css","api/api.ts","serviceWorker.js","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Login/LoginPage.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css"],"names":["required","value","maxLengthCreator","maxLength","length","Preloader","style","backgroundColor","src","preloader","module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","subcribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","console","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","map","m","v1","index","array","ResultCodesEnum","ResultCodeForCapcthaEnum","axios","create","withCredentials","baseURL","Boolean","window","location","hostname","match","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaUrl","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","createField","Input","undefined","className","formSummaryError","LoginPage","useSelector","useDispatch","to","CaptchaIsRequired","initialized","appReducer","sidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","u","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","unfollow","users","totalUsersCount","isFetching","followingInProgress","count","requestUsers","page","totalCount","usersReducer","followed","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","formReducer","app","chat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","props","Suspense","fallback","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","styles","paginator","onClick","selectedPage","pageNumber","key","User","user","small","userPhoto","disabled","some","usersSearchFormValidate","values","UsersSearchForm","React","memo","enableReinitialize","initialValues","String","validate","setSubmitting","onFilterChanged","isSubmitting","as","Users","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","pathname","UsersPage","pageTitle","selectIsAuth","selectCurrentUserLogin","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","alt","icon","UserOutlined","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","ChatPage","SuspendedDialogs","SuspendedProfile","SuspendedChatPage","App","catchAllUnhandledErrors","alert","this","initializeApp","padding","margin","width","height","title","LaptopOutlined","NotificationOutlined","minHeight","exact","path","render","textAlign","Component","AppContainer","withRouter","connect","promise","all","SamuraiJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","validators","component","text"],"mappings":"oIAEA,oEAAO,IAAMA,EAA+B,SAACC,GACzC,IAAIA,EAEJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAA2C,SAACF,GACxE,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,iCCTlC,sCAYeE,IANW,WACtB,OAAO,yBAAMC,MAAQ,CAAEC,gBAAiB,UACpC,yBAAKC,IAAKC,S,oBCPlBC,EAAOC,QAAU,CAAC,UAAY,6BAA6B,WAAa,8BAA8B,aAAe,kC,ySCMxGC,EAAa,SACXC,GACP,OAAOC,IAASC,IAAiB,WAAaF,GAAQG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAFjEN,EAAa,SAIZC,GACN,OAAOC,IAASC,IAAY,kBAAoBF,GAAQG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SALnEN,EAAa,SAOTO,GACT,OAAOL,IAASM,IAAT,iBAAgD,CAACD,OAAQA,IAASH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SARpFN,EAAa,SAUZS,GACN,IAAMC,EAAW,IAAIC,SAGrB,OAFAD,EAASE,OAAO,QAASH,GAElBP,IAASM,IAAT,gBAA0EE,EAAU,CACvFG,QAAS,CACL,eAAgB,yBAErBT,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAlBdN,EAAa,SAoBVc,GACR,OAAOZ,IAASM,IAAT,UAAyCM,GAASV,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCtB7ES,EAAe,CACfC,MAAO,CACH,CAACC,GAAI,EAAGC,QAAS,mBAAoBC,WAAY,IACjD,CAACF,GAAI,EAAGC,QAAS,qBAAuBC,WAAY,IACpD,CAACF,GAAI,EAAGC,QAAS,SAAUC,WAAY,IACvC,CAACF,GAAI,EAAGC,QAAS,OAAQC,WAAY,KAEzCL,QAAS,KACTP,OAAQ,IAsCCa,EAAU,CACnBC,qBAAsB,SAACC,GAAD,MAA0B,CAACC,KAAM,sBAAuBD,gBAC9EE,eAAgB,SAACV,GAAD,MAA2B,CAACS,KAAM,8BAA+BT,YACjFW,UAAW,SAAClB,GAAD,MAAqB,CAACgB,KAAM,wBAAyBhB,WAChEmB,WAAY,SAACC,GAAD,MAAqB,CAACJ,KAAM,yBAA0BI,WAClEC,iBAAkB,SAACC,GAAD,MAAyB,CAACN,KAAM,gCAAiCM,YAG1EC,EAAiB,SAAC7B,GAAD,8CAA+B,WAAO8B,GAAP,eAAAC,EAAA,sEACtChC,EAAsBC,GADgB,OACnDK,EADmD,OAEzDyB,EAASX,EAAQI,eAAelB,IAFyB,2CAA/B,uDAKjB2B,EAAY,SAAChC,GAAD,8CAA+B,WAAO8B,GAAP,eAAAC,EAAA,sEACnChC,EAAqBC,GADc,OAChDK,EADgD,OAEpDyB,EAASX,EAAQK,UAAUnB,IAFyB,2CAA/B,uDAKZ4B,EAAe,SAAC3B,GAAD,8CAA+B,WAAOwB,GAAP,SAAAC,EAAA,+EAElChC,EAAwBO,GAFU,OAI3B,IAJ2B,OAI1C4B,YACLJ,EAASX,EAAQK,UAAUlB,IALoB,uGAA/B,uDAYf6B,EAAY,SAACC,GAAD,8CAA2B,WAAON,GAAP,eAAAC,EAAA,sEAC/BhC,EAAqBqC,GADU,OAGxB,KAFpB/B,EAD4C,QAGvC6B,YACLJ,EAASX,EAAQQ,iBAAiBtB,EAAKA,KAAKuB,SAJA,2CAA3B,uDAQZS,EAAc,SAACxB,GAAD,8CAAqC,WAAOiB,EAAUQ,GAAjB,iBAAAP,EAAA,6DACtD/B,EAASsC,IAAWC,KAAKvC,OAD6B,SAEzCD,EAAuBc,GAFkB,UAIpC,KAFlBR,EAFsD,QAInD6B,WAJmD,oBAK1C,MAAVlC,EALoD,gBAMpD8B,EAASD,EAAe7B,IAN4B,6BAQ9C,IAAIwC,MAAM,wBARoC,uCAWxDV,EAASW,YAAW,eAAgB,CAACC,OAAQrC,EAAKsC,SAAS,MAXH,kBAYjDC,QAAQC,OAAOxC,EAAKsC,SAAS,KAZoB,4CAArC,yDAgBZG,IAzFQ,WAAkE,IAAjEC,EAAgE,uDAAxDjC,EAAckC,EAA0C,uCAEpF,OAAQA,EAAO1B,MACX,IAAK,sBACD,IAAI2B,EAAU,CACVjC,GAAI,EACJC,QAAS+B,EAAO3B,YAChBH,WAAY,GAEhB,OAAO,eACA6B,EADP,CAEIhC,MAAM,GAAD,mBAAMgC,EAAMhC,OAAZ,CAAmBkC,MAGhC,IAAK,wBACD,OAAO,eACAF,EADP,CAEIzC,OAAQ0C,EAAO1C,SAGvB,IAAK,8BACD,OAAO,eAAIyC,EAAX,CAAkBlC,QAASmC,EAAOnC,UAGtC,IAAK,yBACD,OAAO,eAAIkC,EAAX,CAAkBhC,MAAOgC,EAAMhC,MAAMmC,QAAO,SAAAC,GAAC,OAAIA,EAAEnC,IAAMgC,EAAOtB,YAEpE,IAAK,gCACD,OAAO,eAAIqB,EAAX,CAAkBlC,QAAQ,eAAKkC,EAAMlC,QAAZ,CAAqBe,OAAQoB,EAAOpB,WACjE,QACI,OAAOmB,K,uFCpCfjC,EAAe,CACfsC,QAAS,CACL,CAACpC,GAAI,EAAGqC,KAAM,UACd,CAACrC,GAAI,EAAGqC,KAAM,UACd,CAACrC,GAAI,EAAGqC,KAAM,SACd,CAACrC,GAAI,EAAGqC,KAAM,SACd,CAACrC,GAAI,EAAGqC,KAAM,UACd,CAACrC,GAAI,EAAGqC,KAAM,WAElBV,SAAU,CACN,CAAC3B,GAAI,EAAGC,QAAS,MACjB,CAACD,GAAI,EAAGC,QAAS,6BACjB,CAACD,GAAI,EAAGC,QAAS,MACjB,CAACD,GAAI,EAAGC,QAAS,MACjB,CAACD,GAAI,EAAGC,QAAS,QAiBZE,EAAU,CACnBmC,YAAa,SAACC,GAAD,MAA6B,CAACjC,KAAM,0BAA2BiC,oBAGjEC,IAjBQ,WAAkE,IAAjET,EAAgE,uDAAxDjC,EAAckC,EAA0C,uCACpF,OAAQA,EAAO1B,MACX,IAAK,0BACD,IAAImC,EAAOT,EAAOO,eAClB,OAAO,eACAR,EADP,CAEIJ,SAAS,GAAD,mBAAMI,EAAMJ,UAAZ,CAAsB,CAAC3B,GAAI,EAAGC,QAASwC,OAEvD,QACI,OAAOV,K,oBCtCnBlD,EAAOC,QAAU,IAA0B,kC,mLCArC4D,EAAa,CACf,oBAAqB,GACrB,iBAAkB,IAGlBC,EAAuB,KAGrBC,EAAe,WACjBC,EAA6B,WAC7BC,WAAWC,EAAe,MAExBC,EAAiB,SAACC,GACpB,IAAMC,EAAcC,KAAKC,MAAMH,EAAE5D,MACjCqD,EAAW,qBAAqBW,SAAQ,SAAAC,GAAC,OAAIA,EAAEJ,OAE7CK,EAAc,WAChBV,EAA6B,UAE3BW,EAAe,WACjBX,EAA6B,SAC7BY,QAAQC,MAAM,iBAEZC,EAAU,WAAO,IAAD,QAChB,QAAF,EAAAhB,SAAA,SAAIiB,oBAAoB,QAAShB,GAC/B,QAAF,EAAAD,SAAA,SAAIiB,oBAAoB,UAAWZ,GACjC,QAAF,EAAAL,SAAA,SAAIiB,oBAAoB,OAAQL,GAC9B,QAAF,EAAAZ,SAAA,SAAIiB,oBAAoB,QAASJ,IAE/BX,EAA+B,SAACvD,GAClCoD,EAAW,kBAAkBW,SAAQ,SAAAC,GAAC,OAAIA,EAAEhE,OAGhD,SAASyD,IAAiB,IAAD,EACrBY,IACE,QAAF,EAAAhB,SAAA,SAAIkB,QACJlB,EAAK,IAAImB,UAAU,gEACnBjB,EAA6B,WAC7BF,EAAGoB,iBAAiB,QAASnB,GAC7BD,EAAGoB,iBAAiB,UAAWf,GAC/BL,EAAGoB,iBAAiB,OAAQR,GAC5BZ,EAAGoB,iBAAiB,QAASP,GAI1B,IAAMQ,EAAU,WAEfjB,KAFKiB,EAAU,WAIX,IAAD,EACHtB,EAAW,qBAAuB,GAClCA,EAAW,kBAAoB,GAC/BiB,IACE,QAAF,EAAAhB,SAAA,SAAIkB,SARCG,EAAU,SAUTC,EAA4BC,GAGlC,OADAxB,EAAWuB,GAAWE,KAAKD,GACpB,WAEHxB,EAAWuB,GAAavB,EAAWuB,GAAW/B,QAAO,SAAAoB,GAAC,OAAIA,IAAMY,OAf/DF,EAAU,SAkBPC,EAA4BC,GAEpCxB,EAAWuB,GAAavB,EAAWuB,GAAW/B,QAAO,SAAAoB,GAAC,OAAIA,IAAMY,MApB3DF,EAAU,SAsBP/D,GAAkB,IAAD,EACvB,QAAF,EAAA0C,SAAA,SAAIyB,KAAKnE,I,SCxDbH,EAAe,CACf6B,SAAU,GACVrC,OAAQ,WAqBCa,EACS,SAACwB,GAAD,MAAqC,CACnDrB,KAAM,4BAA6B+D,QAAS,CAAC1C,cAFxCxB,EAIM,SAACb,GAAD,MAAyB,CACpCgB,KAAM,yBAA0B+D,QAAS,CAAC/E,YAI9CgF,EAAwE,KACtEC,EAA2B,SAACzD,GAM9B,OAL2B,OAAvBwD,IACAA,EAAqB,SAAC3C,GAClBb,EAASX,EAAyBwB,MAGnC2C,GAGPE,EAA+D,KAC7DC,EAA8B,SAAC3D,GAMjC,OAL8B,OAA1B0D,IACAA,EAAwB,SAAClF,GACrBwB,EAASX,EAAsBb,MAGhCkF,GAGEE,EAAyB,yDAAiB,WAAO5D,GAAP,SAAAC,EAAA,sDACnDiD,IACAA,EAAkB,oBAAqBO,EAAyBzD,IAChEkD,EAAkB,iBAAkBS,EAA4B3D,IAHb,2CAAjB,uDAMzB6D,EAAwB,yDAAiB,WAAO7D,GAAP,SAAAC,EAAA,sDAClDiD,EAAoB,oBAAqBO,EAAyBzD,IAClEkD,EAAoB,iBAAkBS,EAA4B3D,IAClEkD,IAHkD,2CAAjB,uDAMxB1B,EAAc,SAACrC,GAAD,8CAAgC,WAAOa,GAAP,SAAAC,EAAA,sDACvDiD,EAAoB/D,GADmC,2CAAhC,uDAKZ2E,IAhEK,WAAkE,IAAjE7C,EAAgE,uDAAxDjC,EAAckC,EAA0C,uCACjF,OAAQA,EAAO1B,MACX,IAAK,4BACD,OAAO,eACAyB,EADP,CAEIJ,SAAU,sBAAII,EAAMJ,UAAV,YAAuBK,EAAOqC,QAAQ1C,SAASkD,KAAK,SAAAC,GAAC,sBAASA,EAAT,CAAY9E,GAAI+E,qBAC1E7C,QAAO,SAAC4C,EAAGE,EAAOC,GAAX,OAAqBD,GAASC,EAAM1G,OAAS,SAEjE,IAAK,yBACD,OAAO,eACAwD,EADP,CAEIzC,OAAQ0C,EAAOqC,QAAQ/E,SAE/B,QACI,OAAOyC,K,oBC/BnBlD,EAAOC,QAAU,IAA0B,uC,oBCC3CD,EAAOC,QAAU,CAAC,UAAY,2B,gCCD9B,0GAWYoG,EAKAC,EAhBZ,SAGalG,EAHb,OAGwBmG,EAAMC,OAAO,CACjCC,iBAAiB,EACjBC,QAAS,gDACT3F,QAAa,CACT,UAAW,2C,SAIPsF,O,qBAAAA,I,kBAAAA,M,cAKAC,O,2CAAAA,M,gICJQK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oMCPOC,EAAU,WAEf,OAAO5G,IAASC,IAAT,WAA6DC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAF/EwG,EAAU,SAIbC,EAAeC,GAAsE,IAApDC,EAAmD,wDAA/BC,EAA+B,uDAAN,KAChF,OAAOhH,IAASiH,KAAT,aAAgH,CAACJ,QAAOC,WAAUC,aAAYC,YAChJ9G,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SANhBwG,EAAU,WASf,OAAO5G,IAASkH,OAAT,eCdFC,EAAc,WAEnB,OAAOnH,IAASC,IAAT,4BAAoEC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCA/FS,EAAe,CACfd,OAAQ,KACR8G,MAAO,KACPO,MAAO,KACPC,QAAQ,EACRC,WAAY,MAgBHpG,EACQ,SAACnB,EAAuB8G,EAAsBO,EAAsBC,GAApE,MAAyF,CACtGhG,KAAM,wBAAyB+D,QAAS,CAACrF,SAAQ8G,QAAOO,QAAOC,YAF1DnG,EAIa,SAACoG,GAAD,MAAyB,CAC3CjG,KAAM,kCAAmC+D,QAAS,CAACkC,gBAI9CC,EAAkB,yDAAiB,WAAO1F,GAAP,uBAAAC,EAAA,sEACzB8E,IADyB,QACxCY,EADwC,QAEjCvF,aAAegE,IAAgBwB,UAAU,EACvBD,EAAOpH,KAA3BW,EAD0C,EAC1CA,GAAIqG,EADsC,EACtCA,MAAOP,EAD+B,EAC/BA,MAChBhF,EAASX,EAAwBH,EAAI8F,EAAOO,GAAO,KAJX,2CAAjB,uDAuBlBM,EAAgB,yDAAiB,WAAO7F,GAAP,iBAAAC,EAAA,sEACvBqF,IADuB,OACpC/G,EADoC,OAEpCkH,EAAalH,EAAKuH,IACxB9F,EAASX,EAA6BoG,IAHI,2CAAjB,uDAcdM,EA3DK,WAAkE,IAAjE9E,EAAgE,uDAAxDjC,EAAckC,EAA0C,uCACjF,OAAQA,EAAO1B,MACX,IAAK,wBACL,IAAK,kCACD,OAAO,eACAyB,EADP,GAEOC,EAAOqC,SAElB,QACI,OAAOtC,I,iBCYb+E,EAAiBC,YAAkD,CAACC,KAAM,SAAzDD,EAtBjB,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAcvD,EAAuB,EAAvBA,MAAO6C,EAAgB,EAAhBA,WACzB,OACI,0BAAMW,SAAUD,GACXE,YAAqC,QAAS,QAAS,CAAChJ,KAAWiJ,KACnED,YAAqC,WAAY,WAAY,CAAChJ,KAAWiJ,IAAO,CAAC9G,KAAM,aACvF6G,iBAAqCE,EAAW,aAAc,GAAID,IAAO,CAAC9G,KAAM,YAAa,eAE7FiG,GAAc,yBAAK5H,IAAK4H,IACxBA,GAAcY,YAAqC,qBAAsB,UAAW,CAAChJ,KAAWiJ,IAAO,IAGvG1D,GAAS,yBAAK4D,UAAW7I,IAAM8I,kBAC3B7D,GAGL,6BACI,8CAgBH8D,EAAsB,WAC/B,IAAMjB,EAAakB,aAAY,SAAC1F,GAAD,OAAyBA,EAAMR,KAAKgF,cAC7DD,EAASmB,aAAY,SAAC1F,GAAD,OAAyBA,EAAMR,KAAK+E,UACzDxF,EAAW4G,cAMjB,OAAIpB,EACO,kBAAC,IAAD,CAAUqB,GAAI,aAGlB,6BACH,qCACA,kBAACb,EAAD,CAAgBI,SAVH,SAACzH,GDND,IAACqG,EAAeC,EAAkBC,EAAqBC,ECOpEnF,GDPcgF,ECOCrG,EAASqG,MDPKC,ECOEtG,EAASsG,SDPOC,ECOGvG,EAASuG,WDPSC,ECOGxG,EAASwG,QDPnE,uCAAsF,WAAOnF,GAAP,iBAAAC,EAAA,sEACtF8E,EAAcC,EAAOC,EAAUC,EAAYC,GAD2C,QACnG5G,EADmG,QAE9F6B,aAAegE,IAAgBwB,QAEpC5F,EAAS0F,MAELnH,EAAK6B,aAAeiE,IAAyByC,mBAC7C9G,EAAS6F,KAGT1G,EAAUZ,EAAKsC,SAASpD,OAAS,EAAIc,EAAKsC,SAAS,GAAK,aAC5Db,EAASW,YAAW,QAAS,CAACC,OAAQzB,MAX6D,2CAAtF,yDCgBuBsG,WAAYA,M,QC3DpDzG,EAAe,CACf+H,aAAa,GAkBJ1H,EACW,iBAAO,CAACG,KAAM,+BAavBwH,EA1BI,WAAkE,IAAjE/F,EAAgE,uDAAxDjC,EAAckC,EAA0C,uCAChF,OAAQA,EAAO1B,MACX,IAAK,6BACD,OAAO,eACAyB,EADP,CAEI8F,aAAa,IAErB,QACI,OAAO9F,I,2BClBfjC,EAAe,GAMJiI,EAJQ,WAAwC,IAAvChG,EAAsC,uDAA9BjC,EAA8B,iCAC1D,OAAOiC,G,QCFEiG,EAAsB,SAACC,EAAYC,EAAaC,EAAkBC,GAC3E,OAAOH,EAAMpD,KAAI,SAACwD,GACd,OAAIA,EAAEF,KAAiBD,EACZ,eAAIG,EAAX,GAAiBD,GAEdC,MCHFC,EAAW,CACpBC,SADoB,WACwE,IAAnFC,EAAkF,uDAApE,EAAGC,EAAiE,uDAAtD,GAAIC,EAAkD,uDAAnC,GAAIC,EAA+B,uDAAN,KACjF,OAAO1J,IAASC,IAAkB,qBAAcsJ,EAAd,kBAAmCC,EAAnC,iBAAoDC,IAAqB,OAAXC,EAAkB,GAAlB,kBAAkCA,KAC7HxJ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAEzBuJ,OALoB,SAKb5J,GACH,OAAOC,IAASiH,KAAT,iBAAyClH,IAAUG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAE9EwJ,SARoB,SAQX7J,GACL,OAAOC,IAASkH,OAAT,iBAA0BnH,IAAUG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UCL/DS,EAAe,CACfgJ,MAAO,GACPL,SAAU,GACVM,gBAAiB,EACjBP,YAAa,EACbQ,YAAY,EACZC,oBAAqB,GACrB/G,OAAQ,CACJwG,KAAM,GACNC,OAAQ,OA4CHxI,EAGC,SAAC2I,GAAD,MAA6B,CAACxI,KAAM,qBAAsBwI,UAH3D3I,EAIO,SAACqI,GAAD,MAA0B,CAAClI,KAAM,4BAA6BkI,gBAJrErI,EAKE,SAAC+B,GAAD,MAAyB,CAAC5B,KAAM,sBAAuB+D,QAASnC,IALlE/B,EAMW,SAAC4I,GAAD,MAA8B,CAC9CzI,KAAM,iCACN4I,MAAOH,IARF5I,GAUS,SAAC6I,GAAD,MAA0B,CACxC1I,KAAM,8BACN0I,eASKG,GAAe,SAACC,EACAX,EAAkBvG,GAC3C,8CAAO,WAAOpB,EAAUQ,GAAjB,eAAAP,EAAA,6DACHD,EAASX,IAAyB,IAClCW,EAASX,EAAuBiJ,IAChCtI,EAASX,EAAkB+B,IAHxB,SAKcoG,EAASC,SAASa,EAAMX,EAAUvG,EAAOwG,KAAMxG,EAAOyG,QALpE,OAKCtJ,EALD,OAMHyB,EAASX,IAAyB,IAClCW,EAASX,EAAiBd,EAAK4I,QAC/BnH,EAASX,EAA2Bd,EAAKgK,aARtC,2CAAP,yDAqCWC,GApGM,WAA+D,IAA9DvH,EAA6D,uDAArDjC,EAAckC,EAAuC,uCAC/E,OAAQA,EAAO1B,MACX,IAAK,kBACD,OAAO,eACAyB,EADP,CAEI+G,MAAOd,EAAoBjG,EAAM+G,MAAO9G,EAAOhD,OAAQ,KAAM,CAACuK,UAAU,MAEhF,IAAK,oBACD,OAAO,eACAxH,EADP,CAEI+G,MAAOd,EAAoBjG,EAAM+G,MAAO9G,EAAOhD,OAAQ,KAAM,CAACuK,UAAU,MAEhF,IAAK,qBACD,OAAO,eAAIxH,EAAX,CAAkB+G,MAAO9G,EAAO8G,QAEpC,IAAK,4BACD,OAAO,eAAI/G,EAAX,CAAkByG,YAAaxG,EAAOwG,cAE1C,IAAK,iCACD,OAAO,eAAIzG,EAAX,CAAkBgH,gBAAiB/G,EAAOkH,QAE9C,IAAK,8BACD,OAAO,eAAInH,EAAX,CAAkBiH,WAAYhH,EAAOgH,aAEzC,IAAK,sBACD,OAAO,eAAIjH,EAAX,CAAkBG,OAAQF,EAAOqC,UAErC,IAAK,wCACD,OAAO,eACAtC,EADP,CAEIkH,oBAAqBjH,EAAOgH,WAAP,sBACXjH,EAAMkH,qBADK,CACgBjH,EAAOhD,SACtC+C,EAAMkH,oBAAoB/G,QAAO,SAAAlC,GAAE,OAAIA,GAAMgC,EAAOhD,YAGlE,QACI,OAAO+C,I,8BC7CfyH,GAAcC,YAAgB,CAC9BC,YAAa5H,IACb6H,YAAanH,IACboH,QAAS7B,EACT8B,UAAWP,GACX/H,KAAMsF,EACNG,KAAM8C,KACNC,IAAKjC,EACLkC,KAAMpF,OAYJqF,GAAmBxE,OAAOyE,sCAAwCC,IAElEC,GAAQC,YAAYb,GAAaS,GAAiBK,YAAgBC,QAExE9E,OAAO+E,UAAYJ,GAEJA,UCnCR,SAASK,GAAkBC,GAC9B,OAAO,SAACC,GACJ,OAAO,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,4CAC7B,kBAACH,EAAqBC,K,cCErBpC,GAAWuC,cAJC,SAAC/I,GACtB,OAAOA,EAAM8H,UAAUf,SAIvB,SAACA,GACD,OAAOA,EAAM5G,QAAO,SAAAmG,GAAC,OAAI,QAGhB0C,GAAc,SAAChJ,GACxB,OAAOA,EAAM8H,UAAUpB,UAGduC,GAAqB,SAACjJ,GAC/B,OAAOA,EAAM8H,UAAUd,iBAGdkC,GAAiB,SAAClJ,GAC3B,OAAOA,EAAM8H,UAAUrB,aAGd0C,GAAgB,SAACnJ,GAC1B,OAAOA,EAAM8H,UAAUb,YAGdmC,GAAyB,SAACpJ,GACnC,OAAOA,EAAM8H,UAAUZ,qBAEdmC,GAAiB,SAACrJ,GAC3B,OAAOA,EAAM8H,UAAU3H,Q,4DCqBZmJ,GAzCsB,SAAC,GAQlC,IALyD,IAHtBC,EAGqB,EAHrBA,gBAAiB7C,EAGI,EAHJA,SAGI,IAFtBD,mBAEsB,MAFR,EAEQ,MADtB+C,qBACsB,MADN,SAAAC,GAAC,OAAIA,GACC,MAAtBC,mBAAsB,MAAR,GAAQ,EAEpDC,EAAaC,KAAKC,KAAKN,EAAkB7C,GAEzCoD,EAAuB,GAClBC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAM1H,KAAK2H,GAGf,IAAIC,EAAeJ,KAAKC,KAAKF,EAAaD,GATc,EAUhBO,mBAAS,GAVO,oBAUnDC,EAVmD,KAUpCC,EAVoC,KAYpDC,GAAyBF,EAAgB,GAAKR,EAAc,EAC5DW,EAAyBH,EAAgBR,EAG7C,OAAO,yBAAKnE,UAAW+E,KAAGC,KAAOC,YAC3BN,EAAgB,GAClB,4BAAQO,QAAS,WAAQN,EAAiBD,EAAgB,KAA1D,QAEKJ,EACI3J,QAAO,SAAAC,GAAC,OAAIA,GAAKgK,GAAyBhK,GAAGiK,KAC7CvH,KAAI,SAAC1C,GACN,OAAO,0BAAMmF,UAAY+E,KAAG,gBACvBC,KAAOG,aAAejE,IAAgBrG,GACxCmK,KAAOI,YACGC,IAAKxK,EACLqK,QAAS,SAACvJ,GACNsI,EAAcpJ,KACdA,MAEvB4J,EAAeE,GACb,4BAAQO,QAAS,WAAQN,EAAiBD,EAAgB,KAA1D,U,0CCKGW,GAvCmB,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,KAAM5D,EAA2C,EAA3CA,oBAAqBJ,EAAsB,EAAtBA,SAAUD,EAAY,EAAZA,OACrE,OACI,6BACQ,8BACI,6BACG,kBAAC,IAAD,CAASjB,GAAI,YAAckF,EAAK7M,IAC/B,yBAAKrB,IAA0B,MAArBkO,EAAKjM,OAAOkM,MAAgBD,EAAKjM,OAAOkM,MAAQC,KACrDzF,UAAWgF,KAAOS,cAG3B,6BACKF,EAAKtD,SACA,4BAAQyD,SAAU/D,EACfgE,MAAK,SAAAjN,GAAE,OAAIA,IAAO6M,EAAK7M,MAClBwM,QAAS,WACL3D,EAASgE,EAAK7M,MAH1B,YAMA,4BAAQgN,SAAU/D,EAAoBgE,MAAK,SAAAjN,GAAE,OAAIA,IAAO6M,EAAK7M,MACrDwM,QAAS,WACL5D,EAAOiE,EAAK7M,MAFxB,YAQlB,8BACQ,8BACI,6BAAM6M,EAAKxK,MACX,6BAAMwK,EAAKvN,SAEf,8BACI,6BAAM,yBACN,6BAAM,0B,UCxCxB4N,GAA0B,SAACC,GAE7B,MADe,IAeNC,GAAuCC,IAAMC,MAAK,SAAC3C,GAC5D,IAAMzI,EAASuF,YAAY2D,IAW3B,OAAO,6BACH,kBAAC,KAAD,CACImC,oBAAkB,EAClBC,cAAe,CAAC9E,KAAMxG,EAAOwG,KAAMC,OAAQ8E,OAAOvL,EAAOyG,SACzD+E,SAAUR,GACVhG,SAfO,SAACiG,EAAD,GAA4F,IAAxEQ,EAAuE,EAAvEA,cACzBzL,EAAqB,CACvBwG,KAAMyE,EAAOzE,KACbC,OAA0B,SAAlBwE,EAAOxE,OAAoB,KAAyB,SAAlBwE,EAAOxE,QAGrDgC,EAAMiD,gBAAgB1L,GACtByL,GAAc,MAUT,gBAAEE,EAAF,EAAEA,aAAF,OACG,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOvN,KAAK,OAAO+B,KAAK,SAExB,kBAAC,KAAD,CAAOA,KAAK,SAASyL,GAAG,UACpB,4BAAQ1P,MAAM,QAAd,OACA,4BAAQA,MAAM,QAAd,iBACA,4BAAQA,MAAM,SAAd,oBAEJ,4BAAQkC,KAAK,SAAS0M,SAAUa,GAAhC,gB,UC9BPE,GAAuB,SAACpD,GAEjC,IAAM7B,EAAQrB,YAAYc,IACpBQ,EAAkBtB,YAAYuD,IAC9BxC,EAAcf,YAAYwD,IAC1BxC,EAAWhB,YAAYsD,IACvB7I,EAASuF,YAAY2D,IACrBnC,EAAsBxB,YAAY0D,IAElCrK,EAAW4G,cACXsG,EAAUC,cAEhBC,qBAAU,WACN,IAAMC,EAASC,SAAkBJ,EAAQtI,SAAS2I,OAAOC,OAAO,IAE5DC,EAAa/F,EACbgG,EAAetM,EAOnB,OALMiM,EAAO/E,OAAMmF,EAAaE,OAAON,EAAO/E,OAGxC+E,EAAOzF,OAAM8F,EAAY,eAAOA,EAAP,CAAqB9F,KAAMyF,EAAOzF,QAE1DyF,EAAOxF,QACV,IAAK,OACD6F,EAAY,eAAOA,EAAP,CAAqB7F,OAAQ,OACzC,MACJ,IAAK,OACD6F,EAAY,eAAOA,EAAP,CAAqB7F,QAAQ,IACzC,MACJ,IAAK,QACD6F,EAAY,eAAOA,EAAP,CAAqB7F,QAAQ,IAIjD7H,EAASqI,GAAaoF,EAAY9F,EAAU+F,MAC7C,IAEHN,qBAAU,WACN,IAAMQ,EAAyB,GAEzBxM,EAAOwG,OAAMgG,EAAMhG,KAAOxG,EAAOwG,MACjB,OAAlBxG,EAAOyG,SAAiB+F,EAAM/F,OAAS8E,OAAOvL,EAAOyG,SACrC,IAAhBH,IAAmBkG,EAAMtF,KAAOqE,OAAOjF,IAE3CwF,EAAQ7J,KAAK,CACTwK,SAAU,cACVN,OAAQD,aAAsBM,OAEnC,CAACxM,EAAQsG,IAGZ,IAMMI,EAAS,SAATA,EAAU5J,GACZ8B,EAAS8H,EAAO5J,KAEd6J,EAAW,SAAXA,EAAY7J,GACd8B,EAAS+H,EAAS7J,KAGtB,OAAO,6BAEH,kBAACoO,GAAD,CAAiBQ,gBAZG,SAAC1L,GACrBpB,EAASqI,GAAa,EAAGV,EAAUvG,OAanC,kBAAC,GAAD,CAAWsG,YAAaA,EAAa+C,cAjBnB,SAACmB,GACnB5L,EAASqI,GAAauD,EAAYjE,EAAUvG,KAiBjCoJ,gBAAiBvC,EAAiBN,SAAUA,IACvD,6BAEQK,EAAMjE,KAAI,SAAAwD,GAAC,OAAI,kBAAC,GAAD,CAAMwE,KAAMxE,EACNY,oBAAqBA,EACrB0D,IAAKtE,EAAErI,GACP6I,SAAUA,EACVD,OAAQA,UCvFhCgG,GAA0C,SAACjE,GACpD,IAAM3B,EAAavB,YAAYyD,IAC/B,OAAO,oCACH,4BAAKP,EAAMkE,WACV7F,EAAa,kBAACxK,EAAA,EAAD,MAAe,KAC7B,kBAAC,GAAD,Q,oGCbKsQ,GAAe,SAAC/M,GACzB,OAAOA,EAAMR,KAAK+E,QAGTyI,GAAyB,SAAChN,GACnC,OAAOA,EAAMR,KAAK8E,OCGT2I,GAAiC,SAACrE,GAE3C,IAAMrE,EAASmB,YAAYqH,IACrBzI,EAAQoB,YAAYsH,IAEpBjO,EAAW4G,cAMVsH,EAAUC,KAAVD,OAEP,OAAO,kBAACA,EAAD,CAAQ1H,UAAU,UACrB,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAK4H,KAAM,IACP,kBAAC,KAAD,CAAMC,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,MACvD,kBAAC,KAAKC,KAAN,CAAW3C,IAAI,KAAI,kBAAC,IAAD,CAAMhF,GAAG,eAAT,iBAI1BrB,EACI,wCAAG,kBAAC,KAAD,CAAK4I,KAAM,GACX,kBAAC,KAAD,CAAQK,IAAKlJ,GAAS,GAAI5H,MAAO,CAACC,gBAAiB,WAAY8Q,KAAM,kBAACC,GAAA,EAAD,SAErE,kBAAC,KAAD,CAAKP,KAAM,GACP,kBAAC,KAAD,CAAQ1C,QAnBL,WACnB1L,EhBiDc,uCAAiB,WAAOA,GAAP,SAAAC,EAAA,sEACd8E,IADc,OAGF,IAHE,OAGtBxG,KAAK6B,YACdJ,EAASX,EAAwB,KAAM,KAAM,MAAM,IAJpB,2CAAjB,yDgB/BE,aAGN,kBAAC,KAAD,CAAK+O,KAAM,GACT,kBAAC,KAAD,KACI,kBAAC,IAAD,CAAMvH,GAAI,UAAV,cCxBjB+H,GAAWC,KAAXD,QACAE,GAA0BX,KAA1BW,QAASC,GAAiBZ,KAAjBY,OAAQC,GAASb,KAATa,MAElBC,GAAmB1C,IAAM2C,MAAK,kBAAM,iCACpCC,GAAmB5C,IAAM2C,MAAK,kBAAM,iCACpCE,GAAW7C,IAAM2C,MAAK,kBAAM,iCAO5BG,GAAmB1F,GAAasF,IAChCK,GAAmB3F,GAAawF,IAChCI,GAAoB5F,GAAayF,IAGjCI,G,4MACFC,wBAA0B,SAACtN,GACvBuN,MAAM,uB,kEAINC,KAAK9F,MAAM+F,gBACXjL,OAAO1B,iBAAiB,qBAAsB0M,KAAKF,2B,6CAInD9K,OAAO7B,oBAAoB,qBAAsB6M,KAAKF,2B,+BAItD,OAAKE,KAAK9F,MAAM9C,YAMZ,kBAAC,KAAD,KACI,kBAAC,GAAD,MACA,kBAAC+H,GAAD,CAASnR,MAAO,CAACkS,QAAS,WACtB,kBAAC,KAAD,CAAYlS,MAAO,CAACmS,OAAQ,WACxB,kBAAC,KAAWtB,KAAZ,aACA,kBAAC,KAAWA,KAAZ,aACA,kBAAC,KAAWA,KAAZ,aAEJ,kBAAC,KAAD,CAAQhI,UAAU,yBAAyB7I,MAAO,CAACkS,QAAS,WACxD,kBAACb,GAAD,CAAOxI,UAAU,yBAAyBuJ,MAAO,KAC7C,kBAAC,KAAD,CACIzB,KAAK,SAGL3Q,MAAO,CAACqS,OAAQ,SAEhB,kBAACpB,GAAD,CAAS/C,IAAI,OAAO6C,KAAM,kBAACC,GAAA,EAAD,MAAiBsB,MAAM,cAC7C,kBAAC,KAAKzB,KAAN,CAAW3C,IAAI,KAAf,IAAoB,kBAAC,IAAD,CAAMhF,GAAG,YAAT,YACpB,kBAAC,KAAK2H,KAAN,CAAW3C,IAAI,KAAf,IAAoB,kBAAC,IAAD,CAAMhF,GAAG,YAAT,aACpB,kBAAC,KAAK2H,KAAN,CAAW3C,IAAI,KAAf,WACA,kBAAC,KAAK2C,KAAN,CAAW3C,IAAI,KAAf,YAEJ,kBAAC+C,GAAD,CAAS/C,IAAI,OAAO6C,KAAM,kBAACwB,GAAA,EAAD,MAAmBD,MAAM,cAC/C,kBAAC,KAAKzB,KAAN,CAAW3C,IAAI,KAAI,kBAAC,IAAD,CAAMhF,GAAG,eAAT,eACnB,kBAAC,KAAK2H,KAAN,CAAW3C,IAAI,KAAf,WACA,kBAAC,KAAK2C,KAAN,CAAW3C,IAAI,KAAf,WACA,kBAAC,KAAK2C,KAAN,CAAW3C,IAAI,KAAf,YAEJ,kBAAC+C,GAAD,CAAS/C,IAAI,OAAO6C,KAAM,kBAACyB,GAAA,EAAD,MAAyBF,MAAM,YACrD,kBAAC,KAAKzB,KAAN,CAAW3C,IAAI,KAAI,kBAAC,IAAD,CAAMhF,GAAG,SAAT,SACnB,kBAAC,KAAK2H,KAAN,CAAW3C,IAAI,MAAf,YACA,kBAAC,KAAK2C,KAAN,CAAW3C,IAAI,MAAf,YACA,kBAAC,KAAK2C,KAAN,CAAW3C,IAAI,MAAf,eAIZ,kBAACiD,GAAD,CAASnR,MAAO,CAACkS,QAAS,SAAUO,UAAW,MAE3C,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IACXC,OAAQ,kBAAM,kBAAC,IAAD,CAAU1J,GAAI,gBAEnC,kBAAC,IAAD,CAAOyJ,KAAK,WACLC,OAAQ,kBAAM,kBAAClB,GAAD,SAErB,kBAAC,IAAD,CAAOiB,KAAK,oBACLC,OAAQ,kBAAM,kBAACjB,GAAD,SAErB,kBAAC,IAAD,CAAOgB,KAAK,cACLC,OAAQ,kBAAM,kBAAC,GAAD,CAAWxC,UAAW,kDAE3C,kBAAC,IAAD,CAAOuC,KAAK,SACLC,OAAQ,kBAAM,kBAAC,EAAD,SAErB,kBAAC,IAAD,CAAOD,KAAK,QACLC,OAAQ,kBAAM,kBAAChB,GAAD,SAErB,kBAAC,IAAD,CAAOe,KAAK,IACLC,OAAQ,kBAAM,qDAMrC,kBAACxB,GAAD,CAAQpR,MAAO,CAAC6S,UAAW,WAA3B,4DArEG,kBAAC9S,EAAA,EAAD,U,GAhBD+S,aA2HdC,GAAerH,YACfsH,IACAC,aANoB,SAAC3P,GAAD,MAA0B,CAC9C8F,YAAa9F,EAAMgI,IAAIlC,eAKE,CAAC6I,cfrID,kBAAM,SAAC5P,GAChC,IAAI6Q,EAAU7Q,EAAS0F,KAEvB5E,QAAQgQ,IAAI,CAACD,IACRxS,MAAK,WACF2B,EAASX,Ye8HFgK,CAE4BmG,IAUhCuB,GARgB,WAC3B,OAAO,kBAAC,IAAD,KACH,kBAAC,IAAD,CAAUzH,MAAOA,IACb,kBAACoH,GAAD,SC7JZM,IAAST,OAAO,kBAAC,GAAD,MAAiBU,SAASC,eAAe,SrB0HnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhT,MAAK,SAAAiT,GACjCA,EAAaC,iB,6LsBxHbC,EAA8C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAAS9O,EAAsB,EAAtBA,MAAQ+O,EAAc,EAAdA,SACpEC,EAAWF,GAAW9O,EAC5B,OACI,yBAAK4D,UAAWgF,IAAOqG,YAAc,KAAOD,EAAWpG,IAAO5I,MAAQ,KAClE,6BACK+O,GAEJC,GAAY,8BAAOhP,KAKnBkP,EAAwC,SAACjI,GAAU,IAErDkI,EAA6BlI,EAA7BkI,MAAgBC,GAAanI,EAAtB4H,KAF8C,YAExB5H,EAFwB,mBAG5D,OAAO,kBAAC2H,EAAgB3H,EAAO,8CAAckI,EAAWC,MAG/C1L,EAAqC,SAACuD,GAAU,IAElDkI,EAA6BlI,EAA7BkI,MAAgBC,GAAanI,EAAtB4H,KAF2C,YAErB5H,EAFqB,mBAGzD,OAAO,kBAAC2H,EAAgB3H,EAAO,2CAAWkI,EAAWC,MAGlD,SAAS3L,EAAyC4L,EAC7B1Q,EACA2Q,EACAC,GACwB,IAAxBtI,EAAuB,uDAAf,GAAIuI,EAAW,uDAAJ,GAC3C,OAAO,6BACH,kBAAC,IAAD,eAAOH,YAAaA,EAAa1Q,KAAMA,EAChCqL,SAAUsF,EACVC,UAAWA,GACPtI,IAJR,IAKCuI,K,mBC5CZrU,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,2C","file":"static/js/main.54fc7bc8.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    if (value) return undefined;\n\n    return \"Field is required\";\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}\n","import React from 'react';\nimport preloader from \"../../../assets/images/preloader.svg\";\n\ntype PropsType = {\n}\n\nlet Preloader: React.FC = () => {\n    return <div  style={ { backgroundColor: 'white' } }>\n        <img src={preloader} />\n    </div>\n}\n\nexport default Preloader;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__122iJ\",\"pageNumber\":\"Paginator_pageNumber__114dN\",\"selectedPage\":\"Paginator_selectedPage__343Ve\"};","import {PhotosType, ProfileType} from '../types/types';\nimport {instance, APIResponseType} from './api';\n\ntype SavePhotoResponseDataType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\n    },\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\n    },\n    updateStatus(status: string) {\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\n    },\n    savePhoto(photoFile: File) {\n        const formData = new FormData();\n        formData.append(\"image\", photoFile);\n\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(res => res.data);\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\n    }\n}\n","import {FormAction, stopSubmit} from \"redux-form\";\nimport {PhotosType, PostType, ProfileType} from '../types/types';\nimport {usersAPI} from '../api/users-api';\nimport {profileAPI} from '../api/profile-api';\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\n\nlet initialState = {\n    posts: [\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\n        {id: 3, message: 'Blabla', likesCount: 11},\n        {id: 4, message: 'Dada', likesCount: 11}\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: '',\n}\n\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n    switch (action.type) {\n        case 'SN/PROFILE/ADD-POST': {\n            let newPost = {\n                id: 5,\n                message: action.newPostText,\n                likesCount: 0\n            };\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            };\n        }\n        case 'SN/PROFILE/SET_STATUS': {\n            return {\n                ...state,\n                status: action.status\n            }\n        }\n        case 'SN/PROFILE/SET_USER_PROFILE': {\n            return {...state, profile: action.profile}\n        }\n\n        case 'SN/PROFILE/DELETE_POST':\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\n\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\n        default:\n            return state;\n    }\n}\n\n\nexport const actions = {\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText} as const),\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\n}\n\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\n    const data = await profileAPI.getProfile(userId)\n    dispatch(actions.setUserProfile(data))\n}\n\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\n    let data = await profileAPI.getStatus(userId)\n    dispatch(actions.setStatus(data))\n}\n\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n    try {\n        let data = await profileAPI.updateStatus(status)\n\n        if (data.resultCode === 0) {\n            dispatch(actions.setStatus(status))\n        }\n    } catch(error) {\n        //\n    }\n}\n\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\n    let data = await profileAPI.savePhoto(file)\n\n    if (data.resultCode === 0) {\n        dispatch(actions.savePhotoSuccess(data.data.photos))\n    }\n}\n\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\n    const userId = getState().auth.userId\n    const data = await profileAPI.saveProfile(profile)\n\n    if (data.resultCode === 0) {\n        if (userId != null) {\n            dispatch(getUserProfile(userId))\n        } else {\n            throw new Error(\"userId can't be null\")\n        }\n    } else {\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }))\n        return Promise.reject(data.messages[0])\n    }\n}\n\nexport default profileReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","import {InferActionsTypes} from './redux-store';\n\ntype DialogType = {\n    id: number\n    name: string\n}\ntype MessageType = {\n    id: number\n    message: string\n}\n\nlet initialState = {\n    dialogs: [\n        {id: 1, name: 'Dimych'},\n        {id: 2, name: 'Andrew'},\n        {id: 3, name: 'Sveta'},\n        {id: 4, name: 'Sasha'},\n        {id: 5, name: 'Viktor'},\n        {id: 6, name: 'Valera'}\n    ] as Array<DialogType>,\n    messages: [\n        {id: 1, message: 'Hi'},\n        {id: 2, message: 'How is your it-kamasutra?'},\n        {id: 3, message: 'Yo'},\n        {id: 4, message: 'Yo'},\n        {id: 5, message: 'Yo'}\n    ] as Array<MessageType>\n}\n\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/DIALOGS/SEND_MESSAGE':\n            let body = action.newMessageBody;\n            return {\n                ...state,\n                messages: [...state.messages, {id: 6, message: body}]\n            };\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    sendMessage: (newMessageBody: string) => ({type: 'SN/DIALOGS/SEND_MESSAGE', newMessageBody} as const)\n}\n\nexport default dialogsReducer;\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\n","module.exports = __webpack_public_path__ + \"static/media/user.8b1dbb1f.png\";","const subcribers = {\n    'messages-received': [] as MessagesReceivedSubscriberType[],\n    'status-changed': [] as StatusChangedSubscriberType[]\n}\n\nlet ws: WebSocket | null = null\ntype EventsNamesType = 'messages-received' | 'status-changed'\n\nconst closeHandler = () => {\n    notifySubscribersAboutStatus('pending')\n    setTimeout(createChannel, 3000)\n}\nconst messageHandler = (e: MessageEvent) => {\n    const newMessages = JSON.parse(e.data)\n    subcribers['messages-received'].forEach(s => s(newMessages))\n}\nconst openHandler = () => {\n    notifySubscribersAboutStatus('ready')\n}\nconst errorHandler = () => {\n    notifySubscribersAboutStatus('error')\n    console.error('REFRESH PAGE')\n}\nconst cleanUp = () => {\n    ws?.removeEventListener('close', closeHandler)\n    ws?.removeEventListener('message', messageHandler)\n    ws?.removeEventListener('open', openHandler)\n    ws?.removeEventListener('error', errorHandler)\n}\nconst notifySubscribersAboutStatus = (status: StatusType) => {\n    subcribers['status-changed'].forEach(s => s(status))\n}\n\nfunction createChannel() {\n    cleanUp()\n    ws?.close()\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n    notifySubscribersAboutStatus('pending')\n    ws.addEventListener('close', closeHandler)\n    ws.addEventListener('message', messageHandler)\n    ws.addEventListener('open', openHandler)\n    ws.addEventListener('error', errorHandler)\n}\n\n\nexport const chatAPI = {\n    start() {\n        createChannel()\n    },\n    stop() {\n        subcribers['messages-received'] = []\n        subcribers['status-changed'] = []\n        cleanUp()\n        ws?.close()\n    },\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n        // @ts-ignore\n        subcribers[eventName].push(callback)\n        return () => {\n            // @ts-ignore\n            subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\n        }\n    },\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n        // @ts-ignore\n        subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\n    },\n    sendMessage(message: string) {\n        ws?.send(message)\n    }\n}\n\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\ntype StatusChangedSubscriberType = (status: StatusType) => void\n\nexport type ChatMessageAPIType = {\n    message: string\n    photo: string\n    userId: number\n    userName: string\n}\nexport type StatusType = 'pending' | 'ready' | 'error'\n","import {ResultCodeForCapcthaEnum, ResultCodesEnum} from '../api/api'\nimport {stopSubmit} from 'redux-form'\nimport {authAPI} from '../api/auth-api'\nimport {securityAPI} from '../api/security-api'\nimport {BaseThunkType, InferActionsTypes} from './redux-store'\nimport {Action, Dispatch} from 'redux'\nimport {FormAction} from 'redux-form/lib/actions'\nimport {chatAPI, ChatMessageAPIType, StatusType} from '../api/chat-api'\nimport {v1} from 'uuid'\n\ntype ChatMessageType = ChatMessageAPIType & {id: string}\n\nlet initialState = {\n    messages: [] as ChatMessageType[],\n    status: 'pending' as StatusType\n}\n\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/chat/MESSAGES_RECEVIED':\n            return {\n                ...state,\n                messages: [...state.messages, ...action.payload.messages.map( m => ({...m, id: v1() }))]\n                    .filter((m, index, array) => index >= array.length - 100)\n            }\n        case 'SN/chat/STATUS_CHANGED':\n            return {\n                ...state,\n                status: action.payload.status\n            }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\n        type: 'SN/chat/MESSAGES_RECEVIED', payload: {messages}\n    } as const),\n    statusChanged: (status: StatusType) => ({\n        type: 'SN/chat/STATUS_CHANGED', payload: {status}\n    } as const)\n}\n\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\n    if (_newMessageHandler === null) {\n        _newMessageHandler = (messages) => {\n            dispatch(actions.messagesReceived(messages))\n        }\n    }\n    return _newMessageHandler\n}\n\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\n    if (_statusChangedHandler === null) {\n        _statusChangedHandler = (status) => {\n            dispatch(actions.statusChanged(status))\n        }\n    }\n    return _statusChangedHandler\n}\n\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\n    chatAPI.start()\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\n\n}\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\n    chatAPI.stop()\n}\n\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\n    chatAPI.sendMessage(message)\n}\n\n\nexport default chatReducer\n\nexport type InitialStateType = typeof initialState;\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","module.exports = __webpack_public_path__ + \"static/media/preloader.6c3daf60.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1zd60\"};","import axios from \"axios\";\nimport {UserType} from '../types/types';\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers:     {\n        \"API-KEY\": \"63e080d1-f004-48f7-ae2d-df9d85d2ae65\"\n    }\n});\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1\n}\n\nexport enum ResultCodeForCapcthaEnum {\n    CaptchaIsRequired = 10\n}\n\nexport type GetItemsType = {\n    items: Array<UserType>\n    totalCount: number\n    error: string | null\n}\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\n    data: D\n    messages: Array<string>\n    resultCode: RC\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {instance, APIResponseType, ResultCodeForCapcthaEnum, ResultCodesEnum} from \"./api\";\n\ntype MeResponseDataType = {\n    id: number\n    email: string\n    login: string\n}\ntype LoginResponseDataType = {\n    userId: number\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\n    },\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCapcthaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\n            .then(res => res.data);\n    },\n    logout() {\n        return instance.delete(`auth/login`);\n    }\n}\n","import {instance} from './api';\n\ntype GetCaptchaUrlResponseType = {\n    url: string\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data);\n    }\n}\n","import {ResultCodeForCapcthaEnum, ResultCodesEnum} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\nimport {authAPI} from '../api/auth-api';\nimport {securityAPI} from '../api/security-api';\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\nimport {Action} from 'redux';\nimport {FormAction} from 'redux-form/lib/actions';\n\nlet initialState = {\n    userId: null as (number | null),\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null// if null, then captcha is not required\n};\n\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/auth/SET_USER_DATA':\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}\n    } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\n    } as const)\n}\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n    let meData = await authAPI.me()\n    if (meData.resultCode === ResultCodesEnum.Success) {\n        let {id, login, email} = meData.data;\n        dispatch(actions.setAuthUserData(id, email, login, true))\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\n    let data = await authAPI.login(email, password, rememberMe, captcha);\n    if (data.resultCode === ResultCodesEnum.Success) {\n        // success, get auth data\n        dispatch(getAuthUserData())\n    } else {\n        if (data.resultCode === ResultCodeForCapcthaEnum.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl());\n        }\n\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\n        dispatch(stopSubmit(\"login\", {_error: message}));\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\n    const data = await securityAPI.getCaptchaUrl()\n    const captchaUrl = data.url\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\n}\n\nexport const logout = (): ThunkType => async (dispatch: any) => {\n    let response = await authAPI.logout()\n\n    if (response.data.resultCode === 0) {\n        dispatch(actions.setAuthUserData(null, null, null, false))\n    }\n}\n\nexport default authReducer;\n\nexport type InitialStateType = typeof initialState;\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","import React from 'react'\nimport {InjectedFormProps, reduxForm} from 'redux-form'\nimport {createField, GetStringKeys, Input} from '../common/FormsControls/FormsControls'\nimport {required} from '../../utils/validators/validators'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {login} from '../../redux/auth-reducer'\nimport {Redirect} from 'react-router-dom'\nimport style from './../common/FormsControls/FormsControls.module.css'\nimport {AppStateType} from '../../redux/redux-store'\n\ntype LoginFormOwnProps = {\n    captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps>\n    = ({handleSubmit, error, captchaUrl}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input)}\n            {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, {type: 'password'})}\n            {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\n\n            {captchaUrl && <img src={captchaUrl}/>}\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input, {})}\n\n\n            {error && <div className={style.formSummaryError}>\n                {error}\n            </div>\n            }\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\n\nexport type LoginFormValuesType = {\n    captcha: string\n    rememberMe: boolean\n    password: string\n    email: string\n}\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\n\nexport const LoginPage: React.FC = () => {\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n    const dispatch = useDispatch()\n\n    const onSubmit = (formData: LoginFormValuesType) => {\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n    }\n\n    if (isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return <div>\n        <h1>Login</h1>\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\n    </div>\n}\n","import {getAuthUserData} from \"./auth-reducer\"\nimport {InferActionsTypes} from './redux-store';\n\nlet initialState = {\n    initialized: false\n};\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\n\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/APP/INITIALIZED_SUCCESS':\n            return {\n                ...state,\n                initialized: true\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\n}\n\nexport const initializeApp = () => (dispatch: any) => {\n    let promise = dispatch(getAuthUserData());\n\n    Promise.all([promise])\n        .then(() => {\n            dispatch(actions.initializedSuccess());\n        });\n}\n\n\nexport default appReducer;\n","let initialState = {}\ntype InitialStateType = typeof initialState\nconst sidebarReducer = (state = initialState, action: any) => {\n    return state;\n}\n\nexport default sidebarReducer;\n","\nexport const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\n    return items.map((u: any) => {\n        if (u[objPropName] === itemId) {\n            return {...u, ...newObjProps}\n        }\n        return u;\n    })\n}\n","import {GetItemsType, instance, APIResponseType} from './api';\n\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`) )\n            .then(res => res.data)\n    },\n    follow(userId: number) {\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\n    },\n    unfollow(userId: number) {\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\n    }\n}\n","import {updateObjectInArray} from '../utils/object-helpers'\nimport {UserType} from '../types/types'\nimport {BaseThunkType, InferActionsTypes} from './redux-store'\nimport {Dispatch} from 'redux'\nimport {usersAPI} from '../api/users-api'\nimport {APIResponseType} from '../api/api'\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number>, //array of users ids,\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    }\n}\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\n    switch (action.type) {\n        case 'SN/USERS/FOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\n            }\n        case 'SN/USERS/UNFOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\n            }\n        case 'SN/USERS/SET_USERS': {\n            return {...state, users: action.users}\n        }\n        case 'SN/USERS/SET_CURRENT_PAGE': {\n            return {...state, currentPage: action.currentPage}\n        }\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\n            return {...state, totalUsersCount: action.count}\n        }\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\n            return {...state, isFetching: action.isFetching}\n        }\n        case 'SN/USERS/SET_FILTER': {\n            return {...state, filter: action.payload}\n        }\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\n    setTotalUsersCount: (totalUsersCount: number) => ({\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\n        count: totalUsersCount\n    } as const),\n    toggleIsFetching: (isFetching: boolean) => ({\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\n        isFetching\n    } as const),\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\n        isFetching,\n        userId\n    } as const)\n}\n\nexport const requestUsers = (page: number,\n                             pageSize: number, filter: FilterType): ThunkType => {\n    return async (dispatch, getState) => {\n        dispatch(actions.toggleIsFetching(true))\n        dispatch(actions.setCurrentPage(page))\n        dispatch(actions.setFilter(filter))\n\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\n        dispatch(actions.toggleIsFetching(false))\n        dispatch(actions.setUsers(data.items))\n        dispatch(actions.setTotalUsersCount(data.totalCount))\n    }\n}\n\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\n                                   userId: number,\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\n                                   actionCreator: (userId: number) => ActionsTypes) => {\n    dispatch(actions.toggleFollowingProgress(true, userId))\n    let response = await apiMethod(userId)\n\n    if (response.resultCode == 0) {\n        dispatch(actionCreator(userId))\n    }\n    dispatch(actions.toggleFollowingProgress(false, userId))\n}\n\nexport const follow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\n    }\n}\n\nexport const unfollow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\n    }\n}\n\nexport default usersReducer\n\nexport type InitialState = typeof initialState\nexport type FilterType = typeof initialState.filter\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport profileReducer from \"./profile-reducer\";\nimport dialogsReducer from \"./dialogs-reducer\";\nimport sidebarReducer from \"./sidebar-reducer\";\nimport usersReducer from \"./users-reducer\";\nimport authReducer from \"./auth-reducer\";\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\nimport {reducer as formReducer} from 'redux-form'\nimport appReducer from \"./app-reducer\";\nimport chatReducer from './chat-reducer'\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer,\n    chat: chatReducer\n})\n\ntype RootReducerType = typeof rootReducer; // (globalstate: AppStateType) => AppStateType\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\n// @ts-ignore\nwindow.__store__ = store\n\nexport default store\n","import React from \"react\"\n\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n    return (props: WCP) => {\n        return <React.Suspense fallback={<div>loading...</div>} >\n            <WrappedComponent {...props} />\n        </React.Suspense>\n    }\n}\n","import {createSelector} from \"reselect\";\nimport { AppStateType } from \"./redux-store\";\n\nconst getUsersSelector = (state: AppStateType) => {\n    return state.usersPage.users;\n}\n\nexport const getUsers = createSelector(getUsersSelector,\n    (users) => {\n    return users.filter(u => true);\n})\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize;\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount;\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage;\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching;\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress;\n}\nexport const getUsersFilter = (state: AppStateType) => {\n    return state.usersPage.filter;\n}\n","import React, {useState} from 'react'\nimport styles from './Paginator.module.css'\nimport cn from 'classnames'\n\ntype PropsType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage?: number\n    onPageChanged?: (pageNumber: number) => void\n    portionSize?: number\n}\n\nlet Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize,\n                                      currentPage = 1,\n                                      onPageChanged = x => x,\n                                      portionSize = 10}) => {\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\n\n    let pages: Array<number> = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    let rightPortionPageNumber = portionNumber * portionSize;\n\n\n    return <div className={cn(styles.paginator)}>\n        { portionNumber > 1 &&\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\n\n            {pages\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\n                .map((p) => {\n                return <span className={ cn({\n                    [styles.selectedPage]: currentPage === p\n                }, styles.pageNumber) }\n                             key={p}\n                             onClick={(e) => {\n                                 onPageChanged(p);\n                             }}>{p}</span>\n            })}\n        { portionCount > portionNumber &&\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\n\n\n    </div>\n}\n\nexport default Paginator;\n","import React from 'react'\nimport styles from './users.module.css'\nimport userPhoto from '../../assets/images/user.png'\nimport {NavLink} from 'react-router-dom'\nimport {UserType} from '../../types/types'\n\ntype PropsType = {\n    user: UserType\n    followingInProgress: Array<number>\n    unfollow: (userId: number) => void\n    follow: (userId: number) => void\n}\n\nconst User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\n    return (\n        <div>\n                <span>\n                    <div>\n                       <NavLink to={'/profile/' + user.id}>\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\n                             className={styles.userPhoto}/>\n                       </NavLink>\n                    </div>\n                    <div>\n                        {user.followed\n                            ? <button disabled={followingInProgress\n                                .some(id => id === user.id)}\n                                      onClick={() => {\n                                          unfollow(user.id)\n                                      }}>\n                                Unfollow</button>\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\n                                      onClick={() => {\n                                          follow(user.id)\n                                      }}>\n                                Follow</button>}\n\n                    </div>\n                </span>\n            <span>\n                    <span>\n                        <div>{user.name}</div>\n                        <div>{user.status}</div>\n                    </span>\n                    <span>\n                        <div>{'user.location.country'}</div>\n                        <div>{'user.location.city'}</div>\n                    </span>\n                </span>\n        </div>)\n}\n\nexport default User\n","import {Field, Form, Formik} from 'formik'\nimport React from 'react'\nimport {FilterType} from '../../redux/users-reducer'\nimport {useSelector} from 'react-redux'\nimport {getUsersFilter} from '../../redux/users-selectors'\n\nconst usersSearchFormValidate = (values: any) => {\n    const errors = {}\n    return errors\n}\n\ntype FriendFormType = 'true' | 'false' | 'null'\n\ntype FormType = {\n    term: string\n    friend: 'true' | 'false' | 'null'\n}\n\ntype PropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\n    const filter = useSelector(getUsersFilter)\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\n        }\n\n        props.onFilterChanged(filter)\n        setSubmitting(false)\n    }\n\n    return <div>\n        <Formik\n            enableReinitialize\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\n            validate={usersSearchFormValidate}\n            onSubmit={submit}\n        >\n            {({isSubmitting}) => (\n                <Form>\n                    <Field type=\"text\" name=\"term\"/>\n\n                    <Field name=\"friend\" as=\"select\">\n                        <option value=\"null\">All</option>\n                        <option value=\"true\">Only followed</option>\n                        <option value=\"false\">Only unfollowed</option>\n                    </Field>\n                    <button type=\"submit\" disabled={isSubmitting}>\n                        Find\n                    </button>\n                </Form>\n            )}\n        </Formik>\n    </div>\n})\n","import React, {FC, useEffect} from 'react'\nimport Paginator from '../common/Paginator/Paginator'\nimport User from './User'\nimport {UsersSearchForm} from './UsersSearchForm'\nimport {FilterType, requestUsers} from '../../redux/users-reducer'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getPageSize,\n    getTotalUsersCount,\n    getUsers,\n    getUsersFilter\n} from '../../redux/users-selectors'\nimport {useHistory} from 'react-router-dom'\nimport * as queryString from 'querystring'\n\ntype PropsType = {}\n\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\nexport const Users: FC<PropsType> = (props) => {\n\n    const users = useSelector(getUsers)\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const currentPage = useSelector(getCurrentPage)\n    const pageSize = useSelector(getPageSize)\n    const filter = useSelector(getUsersFilter)\n    const followingInProgress = useSelector(getFollowingInProgress)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\n\n        let actualPage = currentPage\n        let actualFilter = filter\n\n        if (!!parsed.page) actualPage = Number(parsed.page)\n\n\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\n\n        switch(parsed.friend) {\n            case \"null\":\n                actualFilter = {...actualFilter, friend: null}\n                break;\n            case \"true\":\n                actualFilter = {...actualFilter, friend: true}\n                break;\n            case \"false\":\n                actualFilter = {...actualFilter, friend: false}\n                break;\n        }\n\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\n    }, [])\n\n    useEffect(() => {\n        const query: QueryParamsType = {}\n\n        if (!!filter.term) query.term = filter.term\n        if (filter.friend !== null) query.friend = String(filter.friend)\n        if (currentPage !== 1) query.page = String(currentPage)\n\n        history.push({\n            pathname: '/developers',\n            search: queryString.stringify(query)\n        })\n    }, [filter, currentPage])\n\n\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(requestUsers(pageNumber, pageSize, filter))\n    }\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(requestUsers(1, pageSize, filter))\n    }\n    const follow = (userId: number) => {\n        dispatch(follow(userId));\n    }\n    const unfollow = (userId: number) => {\n        dispatch(unfollow(userId));\n    }\n\n    return <div>\n\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\n\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\n        <div>\n            {\n                users.map(u => <User user={u}\n                                     followingInProgress={followingInProgress}\n                                     key={u.id}\n                                     unfollow={unfollow}\n                                     follow={follow}\n                    />\n                )\n            }\n        </div>\n    </div>\n}\n","import React from 'react'\nimport {useSelector} from 'react-redux'\nimport Preloader from '../common/Preloader/Preloader'\nimport {getIsFetching} from '../../redux/users-selectors'\nimport {Users} from './Users'\n\ntype UsersPagePropsType = {\n    pageTitle: string\n}\n\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\n    const isFetching = useSelector(getIsFetching)\n    return <>\n        <h2>{props.pageTitle}</h2>\n        {isFetching ? <Preloader/> : null}\n        <Users />\n    </>\n}\n","import {AppStateType} from './redux-store'\n\nexport const selectIsAuth = (state: AppStateType) => {\n    return state.auth.isAuth\n}\n\nexport const selectCurrentUserLogin = (state: AppStateType) => {\n    return state.auth.login\n}\n\n\n","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport {Avatar, Button, Col, Layout, Menu, Row} from 'antd'\nimport {UserOutlined} from '@ant-design/icons'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {selectCurrentUserLogin, selectIsAuth} from '../../redux/auth-selectors'\nimport {logout} from '../../redux/auth-reducer'\n\nexport type MapPropsType = {}\n\nexport const Header: React.FC<MapPropsType> = (props) => {\n\n    const isAuth = useSelector(selectIsAuth)\n    const login = useSelector(selectCurrentUserLogin)\n\n    const dispatch = useDispatch()\n\n    const logoutCallback = () => {\n        dispatch(logout())\n    }\n\n    const {Header} = Layout\n\n    return <Header className=\"header\">\n        <Row>\n            <Col span={18}>\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\n                    <Menu.Item key=\"1\"><Link to=\"/developers\">Developers</Link></Menu.Item>\n                </Menu>\n            </Col>\n\n            {isAuth\n                ?<> <Col span={1}>\n                    <Avatar alt={login || ''} style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\n                </Col>\n                    <Col span={5}>\n                        <Button onClick={logoutCallback}>Log out</Button>\n                    </Col>\n                </>\n                : <Col span={6}>\n                    <Button>\n                        <Link to={'/login'}>Login</Link>\n                    </Button>\n                </Col>}\n\n        </Row>\n\n\n    </Header>\n\n    /*  <header className={s.header}>\n          <img src='https://www.freelogodesign.org/Content/img/logo-ex-7.png' />\n\n          <div className={s.loginBlock}>\n              { props.isAuth\n                  ? <div>{props.login} - <button onClick={props.logout}>Log out</button> </div>\n                  : <NavLink to={'/login'}>Login</NavLink> }\n          </div>\n      </header>*/\n}\n","import React, {Component} from 'react'\nimport './App.css'\nimport 'antd/dist/antd.css'\nimport {BrowserRouter, Link, Redirect, Route, Switch, withRouter} from 'react-router-dom'\nimport {LoginPage} from './components/Login/LoginPage'\nimport {connect, Provider} from 'react-redux'\nimport {compose} from 'redux'\nimport {initializeApp} from './redux/app-reducer'\nimport Preloader from './components/common/Preloader/Preloader'\nimport store, {AppStateType} from './redux/redux-store'\nimport {withSuspense} from './hoc/withSuspense'\nimport {UsersPage} from './components/Users/UsersContainer'\n\nimport {Breadcrumb, Layout, Menu} from 'antd'\nimport {LaptopOutlined, NotificationOutlined, UserOutlined} from '@ant-design/icons'\nimport {Header} from './components/Header/Header'\n\nconst {SubMenu} = Menu\nconst {Content, Footer, Sider} = Layout\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\nconst ChatPage = React.lazy(() => import('./pages/Chat/ChatPage'))\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\nconst SuspendedDialogs = withSuspense(DialogsContainer)\nconst SuspendedProfile = withSuspense(ProfileContainer)\nconst SuspendedChatPage = withSuspense(ChatPage)\n\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert('Some error occured')\n    }\n\n    componentDidMount() {\n        this.props.initializeApp()\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n\n        return (\n            <Layout>\n                <Header/>\n                <Content style={{padding: '0 50px'}}>\n                    <Breadcrumb style={{margin: '16px 0'}}>\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\n                    </Breadcrumb>\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\n                        <Sider className=\"site-layout-background\" width={200}>\n                            <Menu\n                                mode=\"inline\"\n                                /*  defaultSelectedKeys={['7']}*/\n                                /*  defaultOpenKeys={['sub1']}*/\n                                style={{height: '100%'}}\n                            >\n                                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My Profile\">\n                                    <Menu.Item key=\"1\"> <Link to=\"/profile\">Profile</Link></Menu.Item>\n                                    <Menu.Item key=\"2\"> <Link to=\"/dialogs\">Messages</Link></Menu.Item>\n                                    <Menu.Item key=\"3\">option3</Menu.Item>\n                                    <Menu.Item key=\"4\">option4</Menu.Item>\n                                </SubMenu>\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Developers\">\n                                    <Menu.Item key=\"5\"><Link to=\"/developers\">Developers</Link></Menu.Item>\n                                    <Menu.Item key=\"6\">option6</Menu.Item>\n                                    <Menu.Item key=\"7\">option7</Menu.Item>\n                                    <Menu.Item key=\"8\">option8</Menu.Item>\n                                </SubMenu>\n                                <SubMenu key=\"sub3\" icon={<NotificationOutlined/>} title=\"subnav 3\">\n                                    <Menu.Item key=\"9\"><Link to=\"/chat\">Chat</Link></Menu.Item>\n                                    <Menu.Item key=\"10\">option10</Menu.Item>\n                                    <Menu.Item key=\"11\">option11</Menu.Item>\n                                    <Menu.Item key=\"12\">option12</Menu.Item>\n                                </SubMenu>\n                            </Menu>\n                        </Sider>\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\n\n                            <Switch>\n                                <Route exact path='/'\n                                       render={() => <Redirect to={'/profile'}/>}/>\n\n                                <Route path='/dialogs'\n                                       render={() => <SuspendedDialogs/>}/>\n\n                                <Route path='/profile/:userId?'\n                                       render={() => <SuspendedProfile/>}/>\n\n                                <Route path='/developers'\n                                       render={() => <UsersPage pageTitle={'Самураи'}/>}/>\n\n                                <Route path='/login'\n                                       render={() => <LoginPage/>}/>\n\n                                <Route path='/chat'\n                                       render={() => <SuspendedChatPage/>}/>\n\n                                <Route path='*'\n                                       render={() => <div>404 NOT FOUND</div>}/>\n                            </Switch>\n\n                        </Content>\n                    </Layout>\n                </Content>\n                <Footer style={{textAlign: 'center'}}>Samurai Social Network ©2020 Created by IT-KAMASUTRA</Footer>\n            </Layout>\n\n\n            /*      <div className='app-wrapper'>\n                      <HeaderContainer/>\n                      <Navbar/>\n                      <div className='app-wrapper-content'>\n                          <Switch>\n                              <Route exact path='/'\n                                     render={() => <Redirect to={\"/profile\"}/>}/>\n\n                              <Route path='/dialogs'\n                                     render={() => <SuspendedDialogs /> }/>\n\n                              <Route path='/profile/:userId?'\n                                     render={() => <SuspendedProfile /> }/>\n\n                              <Route path='/users'\n                                     render={() => <UsersPage pageTitle={\"Самураи\"}/>}/>\n\n                              <Route path='/login'\n                                     render={() => <LoginPage/>}/>\n\n                              <Route path='*'\n                                     render={() => <div>404 NOT FOUND</div>}/>\n                          </Switch>\n\n                      </div>\n                  </div>*/\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App)\n\nconst SamuraiJSApp: React.FC = () => {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n}\n\nexport default SamuraiJSApp\n","import * as serviceWorker from './serviceWorker';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SamuraiJSApp from \"./App\";\n\nReactDOM.render(<SamuraiJSApp/>, document.getElementById('root'));\n\n\n// API\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\"\nimport styles from \"./FormsControls.module.css\"\nimport {FieldValidatorType} from \"../../../utils/validators/validators\"\nimport {Field, WrappedFieldProps} from \"redux-form\"\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\nimport {LoginFormValuesType} from '../../Login/LoginPage';\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n}\n\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\n                            name: FormKeysType,\n                            validators: Array<FieldValidatorType>,\n                            component: React.FC<WrappedFieldProps>,\n                            props = {}, text = \"\") {\n    return <div>\n        <Field placeholder={placeholder} name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__39eSP\",\"error\":\"FormsControls_error__23HIw\",\"formSummaryError\":\"FormsControls_formSummaryError__I8LDv\"};"],"sourceRoot":""}