{"version":3,"sources":["pages/Chat/ChatPage.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","obj","TypeError","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","key","id","message","ref","React","memo","console","log","src","photo","width","userName","AddMessageForm","setMessage","onChange","value","disabled","onClick","sendMessage","ChatPage"],"mappings":"6LAaMA,EAAiB,WAEnB,IAAMC,EAAWC,cAGXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEd,IAEI,6BACS,UAAXN,GAAsB,4EACvB,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,SAKNO,EAAyB,SAAC,ICpCjB,SAAmCC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCDmCC,IACpC,IAAMC,EAAWT,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKO,YAC3DC,EAAoBC,iBAAuB,MAFd,EAGKC,oBAAS,GAHd,mBAG5BC,EAH4B,KAGdC,EAHc,KAqBnC,OANAX,qBAAU,WACa,IAAD,EAAdU,IACA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACR,IAEG,yBAAKS,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAhBnC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAMH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAiB,KAE/EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,KAWnCL,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OAAc,kBAACC,EAAD,CAASC,IAAKH,EAAEI,GAAIC,QAASL,OACzD,yBAAKM,IAAK3B,MAKZuB,EAAqDK,IAAMC,MAAM,YAAgB,IAAdH,EAAa,EAAbA,QAErE,OADAI,QAAQC,IAAI,iBACL,6BACH,yBAAKC,IAAKN,EAAQO,MAAOzB,MAAO,CAAC0B,MAAO,UADrC,IACgD,2BAAIR,EAAQS,UAC/D,6BACCT,EAAQA,QACT,iCAKFU,EAA+B,WAAO,IAAD,EACTlC,mBAAS,IADA,mBAChCwB,EADgC,KACvBW,EADuB,KAEjClD,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAW/D,OAAO,6BACH,6BACI,8BAAUiD,SAAU,SAAC1B,GAAD,OAAOyB,EAAWzB,EAAEE,cAAcyB,QAAQA,MAAOb,KAEzE,6BACI,4BAAQc,SAAqB,UAAXnD,EAAoBoD,QAbnB,WAClBf,IAGLvC,EAASuD,YAAYhB,IACrBW,EAAW,OAQP,WAKGM,UA7FY,WACvB,OAAO,6BACH,kBAAC,EAAD","file":"static/js/5.4036dc87.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport {ChatMessageAPIType} from '../../api/chat-api'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {sendMessage, startMessagesListening, stopMessagesListening} from '../../redux/chat-reducer'\nimport {AppStateType} from '../../redux/redux-store'\n\n\nconst ChatPage: React.FC = () => {\n    return <div>\n        <Chat/>\n    </div>\n}\n\nconst Chat: React.FC = () => {\n\n    const dispatch = useDispatch()\n\n\n    const status = useSelector((state: AppStateType) => state.chat.status)\n\n    useEffect(() => {\n        dispatch(startMessagesListening())\n        return () => {\n            dispatch(stopMessagesListening())\n        }\n    }, [])\n\n    return <div>\n        {status === 'error' && <div>Some error occured. Please refresh the page</div>}\n        <>\n            <Messages/>\n            <AddMessageForm/>\n        </>\n    </div>\n}\n\nconst Messages: React.FC<{}> = ({}) => {\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n        const element = e.currentTarget;\n        if (Math.abs( (element.scrollHeight - element.scrollTop) - element.clientHeight ) < 300)\n        {\n            !isAutoScroll && setIsAutoScroll(true)\n        } else {\n            isAutoScroll && setIsAutoScroll(false)\n        }\n    }\n\n    useEffect(() => {\n        if (isAutoScroll) {\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\n        }\n    }, [messages])\n\n    return <div style={{height: '400px', overflowY: 'auto'}} onScroll={scrollHandler}>\n        {messages.map((m, index) => <Message key={m.id} message={m}/>)}\n        <div ref={messagesAnchorRef}></div>\n    </div>\n}\n\n\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo( ({message}) => {\n    console.log(\">>>>>>Message\")\n    return <div>\n        <img src={message.photo} style={{width: '30px'}}/> <b>{message.userName}</b>\n        <br/>\n        {message.message}\n        <hr/>\n    </div>\n})\n\n\nconst AddMessageForm: React.FC<{}> = () => {\n    const [message, setMessage] = useState('')\n    const dispatch = useDispatch()\n\n    const status = useSelector((state: AppStateType) => state.chat.status)\n\n\n    const sendMessageHandler = () => {\n        if (!message) {\n            return\n        }\n        dispatch(sendMessage(message))\n        setMessage('')\n    }\n\n    return <div>\n        <div>\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\n        </div>\n        <div>\n            <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\n        </div>\n    </div>\n}\n\nexport default ChatPage\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"sourceRoot":""}